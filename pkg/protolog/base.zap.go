// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/protolog/base.proto

package protolog

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	go_uber_org_zap_zapcore "go.uber.org/zap/zapcore"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (m *Context) MarshalLogObject(enc go_uber_org_zap_zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	keyName = "request" // field request = 1
	if m.Request != nil {
		var vv interface{} = m.Request
		if marshaler, ok := vv.(go_uber_org_zap_zapcore.ObjectMarshaler); ok {
			enc.AddObject(keyName, marshaler)
		}
	}

	keyName = "meta" // field meta = 2
	enc.AddArray(keyName, go_uber_org_zap_zapcore.ArrayMarshalerFunc(func(aenc go_uber_org_zap_zapcore.ArrayEncoder) error {
		for _, rv := range m.Meta {
			_ = rv
			if rv != nil {
				var vv interface{} = rv
				if marshaler, ok := vv.(go_uber_org_zap_zapcore.ObjectMarshaler); ok {
					aenc.AppendObject(marshaler)
				}
			}
		}
		return nil
	}))

	return nil
}

func (m *Request) MarshalLogObject(enc go_uber_org_zap_zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	keyName = "id" // field id = 1
	enc.AddString(keyName, m.Id)

	keyName = "source" // field source = 2
	enc.AddString(keyName, m.Source)

	keyName = "rpcservice" // field rpcservice = 3
	enc.AddString(keyName, m.Rpcservice)

	keyName = "rpcpackage" // field rpcpackage = 4
	enc.AddString(keyName, m.Rpcpackage)

	keyName = "rpcmethod" // field rpcmethod = 5
	enc.AddString(keyName, m.Rpcmethod)

	return nil
}

func (m *Meta) MarshalLogObject(enc go_uber_org_zap_zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	keyName = "key" // field key = 1
	enc.AddString(keyName, m.Key)

	keyName = "value" // field value = 2
	enc.AddString(keyName, m.Value)

	return nil
}
